<h1>Listado de Libros</h1>

<%= form_with url: books_path, method: :get, local: true do |f| %>
  <div>
    <%= label_tag :title, "Título" %>
    <%= text_field_tag :title, params[:title] %>
  </div>

  <div>
    <%= label_tag :author, "Autor" %>
    <%= select_tag :author, options_for_select(@all_authors.unshift(""), params[:author]) %>
  </div>

  <div>
    <%= label_tag :genre, "Género" %>
    <%= select_tag :genre, options_for_select(@all_genres.unshift(""), params[:genre]) %>
  </div>

  <div>
    <%= submit_tag "Buscar" %>
  </div>
<% end %>

<% if current_user.librarian? %>
  <div class="mt-3 mb-4">
    <%= link_to 'Nuevo libro', new_book_path, class: 'btn btn-success' %>
  </div>
<% end %>

<table>
  <thead>
    <tr>
      <th>Título</th>
      <th>Autor</th>
      <th>Género</th>
      <th>ISBN</th>
    </tr>
  </thead>
  <tbody>
    <% @books.each do |book| %>
      <tr>
        <td><%= book.title %></td>
        <td><%= book.author %></td>
        <td><%= book.genre %></td>
        <td><%= book.isbn %></td>

        <% if current_user.librarian? %>
          <%= link_to 'Update', edit_book_path(book), class: 'btn btn-primary' %>
          <%= button_to 'Delete', book_path(book), method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-danger' %>

          <% if (borrowing = book.borrowings.find_by(returned_at: nil)) %>
            <button class="btn btn-success" onclick="markAsReturned(<%= borrowing.id %>)">Mark as Returned</button>
          <% end %>
        <% else %>
          <% already_borrowed = book.borrowings.exists?(user_id: current_user.id, returned_at: nil) %>

          <% if book.available_copies > 0 && !already_borrowed %>
            <button class="btn btn-info" onclick="borrowBook(<%= book.id %>)">Borrow</button>
          <% elsif already_borrowed %>
            <span class="text-muted">Already borrowed</span>
          <% else %>
            <span class="text-muted">No copies available</span>
          <% end %>
        <% end %>
      </tr>
    <% end %>
  </tbody>
</table>

<%= will_paginate @books %>

<script>
  async function markAsReturned(borrowingId) {
    const confirmReturn = confirm("¿Marcar este libro como devuelto?");
    if (!confirmReturn) return;

    try {
      const response = await fetch(`/api/v1/borrowings/${borrowingId}/return`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': document.querySelector("[name=csrf-token]").content
        }
      });

      const data = await response.json();
      if (response.ok) {
        alert("Libro marcado como devuelto.");
        location.reload(); // Refresca la página para reflejar cambios
      } else {
        alert("Error: " + (data.errors || "No se pudo marcar como devuelto"));
      }
    } catch (error) {
      alert("Error de red al marcar como devuelto.");
    }
  }
</script>